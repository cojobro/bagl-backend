const express = require("express");
const router = express.Router();
const pool = require("../db");
const { OpenAI } = require("openai");

const openai = new OpenAI();

// POST /api/summarize
//   Accepts JSON body: { paperId: number }
//   Returns a short summary generated by OpenAI’s ChatCompletion.
router.post("/", async (req, res) => {
  const { paperId } = req.body;

  if (!paperId || !Number.isInteger(paperId)) {
    return res.status(400).json({ error: "Request body must contain 'paperId' as integer." });
  }

  try {
    // 1) Fetch full_text from DB
    const paperRes = await pool.query(
      `SELECT title, full_text FROM papers WHERE id = $1`,
      [paperId]
    );
    if (paperRes.rows.length === 0) {
      return res.status(404).json({ error: "Paper not found" });
    }
    const { title, full_text } = paperRes.rows[0];

    // 2) Truncate or chunk the full_text if necessary.
    // For simplicity, we’ll send up to first 4000 characters (≈ 3000 tokens).
    // For longer papers, ideally implement chunking + chain-of-thought summarization.
    const maxChars = 4000;
    const textSnippet = full_text.length > maxChars ? full_text.slice(0, maxChars) + " …" : full_text;

    // 3) Call ChatCompletion to summarize
    const prompt = [
      {
        role: "system",
        content: "You are a helpful assistant that summarizes biomedical research papers. Please respond with a simple description that explains the concepts to the reader on an 8th grade reading level.",
      },
      {
        role: "user",
        content: `Summarize the following paper titled "${title}". Provide a concise overview of objectives, methods, and key findings:\n\n${textSnippet}`,
      },
    ];

    const completion = await openai.chat.completions.create({
      model: "gpt-4o-mini", // or another ChatCompletion model
      messages: prompt,
      max_tokens: 500,
      temperature: 0.3,
    });

    const summary = completion.choices[0].message.content.trim();
    res.json({ paperId, summary });
  } catch (err) {
    console.error("Error in /api/summarize:", err);
    res.status(500).json({ error: "Internal server error" });
  }
});

module.exports = router;
